/*------------------------------------------------------------------------------
 * uVision/ARM development tools
 * Copyright (c) 2004-2013 ARM Germany GmbH. All rights reserved.
 *------------------------------------------------------------------------------
 * Name:    test
 * Purpose: ROM Image generated from user specified files.
 * Note:    Generated by FCARM FILE CONVERTER V2.50, do not modify!
 *----------------------------------------------------------------------------*/

#include <stddef.h>
#include <stdint.h>

/* File information */
typedef struct _imageFileItem {
  uint32_t       id;            /* Name identifier (CRC32 value of file name) */
  const uint8_t *data;          /* Data start address in ROM                  */
} imageFileItem;

#define IMAGE_FILE_COUNT 1

/* Last-Modified: Thu, 04 Dec 2014 10:45:59 GMT */
const uint32_t imageLastModified = 1417689959;

static const uint8_t imageFileData[850] = {

/*-- File: C:\Keil_v5\FREERTOS\FreeRTOS\Source\include\stdint.readme, 850 bytes --*/
0x0D,0x0A,0x23,0x69,0x66,0x6E,0x64,0x65,0x66,0x20,0x46,0x52,0x45,0x45,0x52,0x54,
0x4F,0x53,0x5F,0x53,0x54,0x44,0x49,0x4E,0x54,0x0D,0x0A,0x23,0x64,0x65,0x66,0x69,
0x6E,0x65,0x20,0x46,0x52,0x45,0x45,0x52,0x54,0x4F,0x53,0x5F,0x53,0x54,0x44,0x49,
0x4E,0x54,0x0D,0x0A,0x0D,0x0A,0x2F,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,
0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,
0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,
0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,
0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,
0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x0D,0x0A,0x20,0x2A,0x20,0x54,0x48,0x49,0x53,0x20,
0x49,0x53,0x20,0x4E,0x4F,0x54,0x20,0x41,0x20,0x46,0x55,0x4C,0x4C,0x20,0x73,0x74,
0x64,0x69,0x6E,0x74,0x2E,0x68,0x20,0x49,0x4D,0x50,0x4C,0x45,0x4D,0x45,0x4E,0x54,
0x41,0x54,0x49,0x4F,0x4E,0x20,0x2D,0x20,0x49,0x74,0x20,0x6F,0x6E,0x6C,0x79,0x20,
0x63,0x6F,0x6E,0x74,0x61,0x69,0x6E,0x73,0x20,0x74,0x68,0x65,0x20,0x64,0x65,0x66,
0x69,0x6E,0x69,0x74,0x69,0x6F,0x6E,0x73,0x0D,0x0A,0x20,0x2A,0x20,0x6E,0x65,0x63,
0x65,0x73,0x73,0x61,0x72,0x79,0x20,0x74,0x6F,0x20,0x62,0x75,0x69,0x6C,0x64,0x20,
0x74,0x68,0x65,0x20,0x46,0x72,0x65,0x65,0x52,0x54,0x4F,0x53,0x20,0x63,0x6F,0x64,
0x65,0x2E,0x20,0x20,0x49,0x74,0x20,0x69,0x73,0x20,0x70,0x72,0x6F,0x76,0x69,0x64,
0x65,0x64,0x20,0x74,0x6F,0x20,0x61,0x6C,0x6C,0x6F,0x77,0x20,0x46,0x72,0x65,0x65,
0x52,0x54,0x4F,0x53,0x20,0x74,0x6F,0x20,0x62,0x65,0x0D,0x0A,0x20,0x2A,0x20,0x62,
0x75,0x69,0x6C,0x74,0x20,0x75,0x73,0x69,0x6E,0x67,0x20,0x63,0x6F,0x6D,0x70,0x69,
0x6C,0x65,0x72,0x73,0x20,0x74,0x68,0x61,0x74,0x20,0x64,0x6F,0x20,0x6E,0x6F,0x74,
0x20,0x70,0x72,0x6F,0x76,0x69,0x64,0x65,0x20,0x74,0x68,0x65,0x69,0x72,0x20,0x6F,
0x77,0x6E,0x20,0x73,0x74,0x64,0x69,0x6E,0x74,0x2E,0x68,0x20,0x64,0x65,0x66,0x69,
0x6E,0x69,0x74,0x69,0x6F,0x6E,0x2E,0x0D,0x0A,0x20,0x2A,0x0D,0x0A,0x20,0x2A,0x20,
0x54,0x6F,0x20,0x75,0x73,0x65,0x20,0x74,0x68,0x69,0x73,0x20,0x66,0x69,0x6C,0x65,
0x3A,0x0D,0x0A,0x20,0x2A,0x0D,0x0A,0x20,0x2A,0x20,0x20,0x20,0x20,0x31,0x29,0x20,
0x43,0x6F,0x70,0x79,0x20,0x74,0x68,0x69,0x73,0x20,0x66,0x69,0x6C,0x65,0x20,0x69,
0x6E,0x74,0x6F,0x20,0x74,0x68,0x65,0x20,0x64,0x69,0x72,0x65,0x63,0x74,0x6F,0x72,
0x79,0x20,0x74,0x68,0x61,0x74,0x20,0x63,0x6F,0x6E,0x74,0x61,0x69,0x6E,0x73,0x20,
0x79,0x6F,0x75,0x72,0x20,0x46,0x72,0x65,0x65,0x52,0x54,0x4F,0x53,0x43,0x6F,0x6E,
0x66,0x69,0x67,0x2E,0x68,0x0D,0x0A,0x20,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
0x68,0x65,0x61,0x64,0x65,0x72,0x20,0x66,0x69,0x6C,0x65,0x2C,0x20,0x61,0x73,0x20,
0x74,0x68,0x61,0x74,0x20,0x64,0x69,0x72,0x65,0x63,0x74,0x6F,0x72,0x79,0x20,0x77,
0x69,0x6C,0x6C,0x20,0x61,0x6C,0x72,0x65,0x61,0x64,0x79,0x20,0x62,0x65,0x20,0x69,
0x6E,0x20,0x74,0x68,0x65,0x20,0x63,0x6F,0x6D,0x70,0x69,0x6C,0x65,0x72,0x73,0x20,
0x69,0x6E,0x63,0x6C,0x75,0x64,0x65,0x0D,0x0A,0x20,0x2A,0x20,0x20,0x20,0x20,0x20,
0x20,0x20,0x70,0x61,0x74,0x68,0x2E,0x0D,0x0A,0x20,0x2A,0x0D,0x0A,0x20,0x2A,0x20,
0x20,0x20,0x20,0x32,0x29,0x20,0x52,0x65,0x6E,0x61,0x6D,0x65,0x20,0x74,0x68,0x65,
0x20,0x63,0x6F,0x70,0x69,0x65,0x64,0x20,0x66,0x69,0x6C,0x65,0x20,0x73,0x74,0x64,
0x69,0x6E,0x74,0x2E,0x68,0x2E,0x0D,0x0A,0x20,0x2A,0x0D,0x0A,0x20,0x2A,0x2F,0x0D,
0x0A,0x0D,0x0A,0x74,0x79,0x70,0x65,0x64,0x65,0x66,0x20,0x73,0x69,0x67,0x6E,0x65,
0x64,0x20,0x63,0x68,0x61,0x72,0x20,0x69,0x6E,0x74,0x38,0x5F,0x74,0x3B,0x0D,0x0A,
0x74,0x79,0x70,0x65,0x64,0x65,0x66,0x20,0x75,0x6E,0x73,0x69,0x67,0x6E,0x65,0x64,
0x20,0x63,0x68,0x61,0x72,0x20,0x75,0x69,0x6E,0x74,0x38,0x5F,0x74,0x3B,0x0D,0x0A,
0x74,0x79,0x70,0x65,0x64,0x65,0x66,0x20,0x73,0x68,0x6F,0x72,0x74,0x20,0x69,0x6E,
0x74,0x31,0x36,0x5F,0x74,0x3B,0x0D,0x0A,0x74,0x79,0x70,0x65,0x64,0x65,0x66,0x20,
0x75,0x6E,0x73,0x69,0x67,0x6E,0x65,0x64,0x20,0x73,0x68,0x6F,0x72,0x74,0x20,0x75,
0x69,0x6E,0x74,0x31,0x36,0x5F,0x74,0x3B,0x0D,0x0A,0x74,0x79,0x70,0x65,0x64,0x65,
0x66,0x20,0x6C,0x6F,0x6E,0x67,0x20,0x69,0x6E,0x74,0x33,0x32,0x5F,0x74,0x3B,0x0D,
0x0A,0x74,0x79,0x70,0x65,0x64,0x65,0x66,0x20,0x75,0x6E,0x73,0x69,0x67,0x6E,0x65,
0x64,0x20,0x6C,0x6F,0x6E,0x67,0x20,0x75,0x69,0x6E,0x74,0x33,0x32,0x5F,0x74,0x3B,
0x0D,0x0A,0x0D,0x0A,0x23,0x65,0x6E,0x64,0x69,0x66,0x20,0x2F,0x2A,0x20,0x46,0x52,
0x45,0x45,0x52,0x54,0x4F,0x53,0x5F,0x53,0x54,0x44,0x49,0x4E,0x54,0x20,0x2A,0x2F,
0x0D,0x0A,
};

static const imageFileItem imageFileTable[1+1] = {
  { 0x3D5503A3, &imageFileData[0]   },
  { 0x00000000, &imageFileData[850] }
};

/*
 * Calculate 32-bit CRC (Polynom: 0x04C11DB7)
 *   Parameters:
 *     crc32:       CRC initial value
 *     val:         Input value
 *   Return value:  Calculated CRC value
 */
static uint32_t crc32_8bit (uint32_t crc32, uint8_t val) {
  uint32_t n;

  crc32 ^= ((uint32_t)val) << 24;
  for (n = 8; n; n--) {
    if (crc32 & 0x80000000) {
      crc32 <<= 1;
      crc32  ^= 0x04C11DB7;
    } else {
      crc32 <<= 1;
    }
  }
  return (crc32);
}

/*
 * Get file information from ROM image
 *   Parameters:
 *     name:        File name
 *     data:        Pointer where file data pointer will be written
 *   Return value:  File size
 */
uint32_t imageFileInfo (const char *name, const uint8_t **data) {
  uint32_t id, n;

  if ((name == NULL) || (data == NULL)) return 0;

  id = 0xFFFFFFFF;
  for (; *name; name++) {
    id = crc32_8bit(id, *name);
  }

  for (n = 0; n < IMAGE_FILE_COUNT; n++) {
    if (imageFileTable[n].id == id) {
      *data = imageFileTable[n].data;
      return (imageFileTable[n+1].data - imageFileTable[n].data);
    }
  }
  return 0;
}
